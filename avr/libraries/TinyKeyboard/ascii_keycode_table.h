#ifndef __ascii_keycode_table_h__
#define __ascii_keycode_table_h__

#include "keycode.h"

// Lookup table to convert ascii characters in to keyboard scan codes
// Format: most signifficant bit indicates if scan code should be sent with shift modifier
// remaining 7 bits are to be used as scan code number.

#define SHIFT(keycode) (keycode | 0x80)

const unsigned char ascii_to_keycode[] PROGMEM = {
  /* ASCII   0: NUL   */ KC_NO,
  /* ASCII   1: SOH   */ 0,
  /* ASCII   2: STX   */ 0,
  /* ASCII   3: ETX   */ 0,
  /* ASCII   4: EOT   */ 0,
  /* ASCII   5: ENQ   */ 0,
  /* ASCII   6: ACK   */ 0,
  /* ASCII   7: BEL   */ 0,
  /* ASCII   8: BS    */ KC_BSPACE,
  /* ASCII   9: TAB   */ KC_TAB,
  /* ASCII  10: LF    */ KC_ENTER,
  /* ASCII  11: VT    */ 0,
  /* ASCII  12: FF    */ 0,
  /* ASCII  13: CR    */ 0,
  /* ASCII  14: SO    */ 0,
  /* ASCII  15: SI    */ 0,
  /* ASCII  16: DLE   */ 0,
  /* ASCII  17: DC1   */ 0,
  /* ASCII  18: DC2   */ 0,
  /* ASCII  19: DC3   */ 0,
  /* ASCII  20: DC4   */ 0,
  /* ASCII  21: NAK   */ 0,
  /* ASCII  22: SYN   */ 0,
  /* ASCII  23: ETB   */ 0,
  /* ASCII  24: CAN   */ 0,
  /* ASCII  25: EM    */ 0,
  /* ASCII  26: SUB   */ 0,
  /* ASCII  27: ESC   */ KC_ESCAPE,
  /* ASCII  28: FS    */ 0,
  /* ASCII  29: GS    */ 0,
  /* ASCII  30: RS    */ 0,
  /* ASCII  31: US    */ 0,
  /* ASCII  32: Space */ KC_SPACE,
  /* ASCII  33: !     */ SHIFT(KC_1),
  /* ASCII  34: "     */ SHIFT(KC_QUOTE),
  /* ASCII  35: #     */ SHIFT(KC_3),
  /* ASCII  36: $     */ SHIFT(KC_4),
  /* ASCII  37: %     */ SHIFT(KC_5),
  /* ASCII  38: &     */ SHIFT(KC_7),
  /* ASCII  39: '     */ KC_QUOTE,
  /* ASCII  40: (     */ SHIFT(KC_9),
  /* ASCII  41: )     */ SHIFT(KC_0),
  /* ASCII  42: *     */ SHIFT(KC_8),
  /* ASCII  43: +     */ SHIFT(KC_EQUAL),
  /* ASCII  44: ,     */ KC_COMMA,
  /* ASCII  45: -     */ KC_MINUS,
  /* ASCII  46: .     */ KC_DOT,
  /* ASCII  47: /     */ KC_SLASH,
  /* ASCII  48: 0     */ KC_0,
  /* ASCII  49: 1     */ KC_1,
  /* ASCII  50: 2     */ KC_2,
  /* ASCII  51: 3     */ KC_3,
  /* ASCII  52: 4     */ KC_4,
  /* ASCII  53: 5     */ KC_5,
  /* ASCII  54: 6     */ KC_6,
  /* ASCII  55: 7     */ KC_7,
  /* ASCII  56: 8     */ KC_8,
  /* ASCII  57: 9     */ KC_9,
  /* ASCII  58: :     */ SHIFT(KC_SCOLON),
  /* ASCII  59: ;     */ KC_SCOLON,
  /* ASCII  60: <     */ SHIFT(KC_COMMA),
  /* ASCII  61: =     */ KC_EQUAL,
  /* ASCII  62: >     */ SHIFT(KC_DOT),
  /* ASCII  63: ?     */ SHIFT(KC_SLASH),
  /* ASCII  64: @     */ SHIFT(KC_2),
  /* ASCII  65: A     */ SHIFT(KC_A),
  /* ASCII  66: B     */ SHIFT(KC_B),
  /* ASCII  67: C     */ SHIFT(KC_C),
  /* ASCII  68: D     */ SHIFT(KC_D),
  /* ASCII  69: E     */ SHIFT(KC_E),
  /* ASCII  70: F     */ SHIFT(KC_F),
  /* ASCII  71: G     */ SHIFT(KC_G),
  /* ASCII  72: H     */ SHIFT(KC_H),
  /* ASCII  73: I     */ SHIFT(KC_I),
  /* ASCII  74: J     */ SHIFT(KC_J),
  /* ASCII  75: K     */ SHIFT(KC_K),
  /* ASCII  76: L     */ SHIFT(KC_L),
  /* ASCII  77: M     */ SHIFT(KC_M),
  /* ASCII  78: N     */ SHIFT(KC_N),
  /* ASCII  79: O     */ SHIFT(KC_O),
  /* ASCII  80: P     */ SHIFT(KC_P),
  /* ASCII  81: Q     */ SHIFT(KC_Q),
  /* ASCII  82: R     */ SHIFT(KC_R),
  /* ASCII  83: S     */ SHIFT(KC_S),
  /* ASCII  84: T     */ SHIFT(KC_T),
  /* ASCII  85: U     */ SHIFT(KC_U),
  /* ASCII  86: V     */ SHIFT(KC_V),
  /* ASCII  87: W     */ SHIFT(KC_W),
  /* ASCII  88: X     */ SHIFT(KC_X),
  /* ASCII  89: Y     */ SHIFT(KC_Y),
  /* ASCII  90: Z     */ SHIFT(KC_Z),
  /* ASCII  91: [     */ KC_LBRACKET,
  /* ASCII  92: \     */ KC_BSLASH,
  /* ASCII  93: ]     */ KC_RBRACKET,
  /* ASCII  94: ^     */ SHIFT(KC_6),
  /* ASCII  95: _     */ SHIFT(KC_MINUS),
  /* ASCII  96: `     */ KC_GRAVE,
  /* ASCII  97: a     */ KC_A,
  /* ASCII  98: b     */ KC_B,
  /* ASCII  99: c     */ KC_C,
  /* ASCII 100: d     */ KC_D,
  /* ASCII 101: e     */ KC_E,
  /* ASCII 102: f     */ KC_F,
  /* ASCII 103: g     */ KC_G,
  /* ASCII 104: h     */ KC_H,
  /* ASCII 105: i     */ KC_I,
  /* ASCII 106: j     */ KC_J,
  /* ASCII 107: k     */ KC_K,
  /* ASCII 108: l     */ KC_L,
  /* ASCII 109: m     */ KC_M,
  /* ASCII 110: n     */ KC_N,
  /* ASCII 111: o     */ KC_O,
  /* ASCII 112: p     */ KC_P,
  /* ASCII 113: q     */ KC_Q,
  /* ASCII 114: r     */ KC_R,
  /* ASCII 115: s     */ KC_S,
  /* ASCII 116: t     */ KC_T,
  /* ASCII 117: u     */ KC_U,
  /* ASCII 118: v     */ KC_V,
  /* ASCII 119: w     */ KC_W,
  /* ASCII 120: x     */ KC_X,
  /* ASCII 121: y     */ KC_Y,
  /* ASCII 122: z     */ KC_Z,
  /* ASCII 123: {     */ SHIFT(KC_LBRACKET),
  /* ASCII 124: |     */ SHIFT(KC_BSLASH),
  /* ASCII 125: }     */ SHIFT(KC_RBRACKET),
  /* ASCII 126: ~     */ SHIFT(KC_GRAVE),
  /* ASCII 127: DEL   */ KC_DELETE
};

#endif